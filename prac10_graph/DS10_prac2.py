'''
DS10 prac2 

인접행렬로 표현된 그래프에 대한 너비우선탐색 알고리즘을 구현하시오.
- 단 큐는 파이썬의 queue 모듈의 Queue 클래스 사용
'''

from queue import Queue

def bfs(adj, vtx, s):
    n = len(vtx)
    visited = [False]*n 
    Q = Queue()
    Q.put(s)
    visited[s] = True
    while not Q.empty() :
        s = Q.get()
        print(vtx[s], end=' ')
        for v in range(len(vtx)) :
            if visited[v] == False and adj[s][v] != 0 :
                Q.put(v)
                visited[v] = True
    return


#
# vertex = ['A', 'B', 'C', 'D', 'E', 'F', 'G', 'H']
# adjMat = [ [ 0, 1, 1, 0, 0, 0, 0, 0],
#             [ 1, 0, 0, 1, 0, 0, 0, 0],
#             [ 1, 0, 0, 1, 1, 0, 0, 0],
#             [ 0, 1, 1, 0, 0, 1, 0, 0],
#             [ 0, 0, 1, 0, 0, 0, 1, 1],
#             [ 0, 0, 0, 1, 0, 0, 0, 0],
#             [ 0, 0, 0, 0, 1, 0, 0, 1],
#             [ 0, 0, 0, 0, 1, 0, 1, 0] ]

# vertex = ['S', 'A', 'B', 'C', 'D']
# adjMat = [ 
#           [ 0,1,1,1,0],
#           [ 1,0,0,0,1],
#           [ 1,0,0,0,1],
#           [ 1,0,0,0,1],
#           [ 0,0,1,1,0],
          
#           ]

vertex = ['0','1','2','3','4','5','6','7','8','9']
adjMat = [ 
          [ 0,1,0,0,0,0,0,0,0,0],
          [ 0,0,1,1,0,0,0,0,0,0],
          [ 0,1,0,0,1,0,0,0,0,0],
          [ 0,1,0,0,1,1,0,0,0,0],
          [ 0,0,1,1,0,0,0,0,0,0],
          [ 0,0,0,1,0,0,1,1,0,0],
          [ 0,0,0,0,0,1,0,1,0,0],
          [ 0,0,0,0,0,1,1,0,1,1],
          [ 0,0,0,0,0,0,0,1,0,0],
          [ 0,0,0,0,0,0,0,1,0,0],
          
          ]


print('BFS : ', end="")
bfs(adjMat, vertex, 3)
print()