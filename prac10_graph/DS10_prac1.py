'''
DS10_prac1

인접행렬로 표현된 그래프에 대한 깊이우선탐색 알고리즘을 구현하시오
'''
    
def dfs_recur(adj, vtx, visited, id) :
    print(vtx[id], end=' ')

    visited[id] = True

    for v in range(len(vtx)) :
        if visited[v] == False and adj[id][v] != 0 :
            dfs_recur(adj, vtx, visited, v)
    return

def dfs(adj, vtx, s):
    n = len(vtx)
    visited = [False]*n
    dfs_recur(adj, vtx, visited, s)



#
# vertex = ['A', 'B', 'C', 'D', 'E', 'F', 'G', 'H']
# adjMat = [ [ 0, 1, 1, 0, 0, 0, 0, 0],
#             [ 1, 0, 0, 1, 0, 0, 0, 0],
#             [ 1, 0, 0, 1, 1, 0, 0, 0],
#             [ 0, 1, 1, 0, 0, 1, 0, 0],
#             [ 0, 0, 1, 0, 0, 0, 1, 1],
#             [ 0, 0, 0, 1, 0, 0, 0, 0],
#             [ 0, 0, 0, 0, 1, 0, 0, 1],
#             [ 0, 0, 0, 0, 1, 0, 1, 0] ]


# vertex = ['S', 'A', 'B', 'C', 'D']
# adjMat = [ 
#           [ 0,1,1,1,0],
#           [ 1,0,0,0,1],
#           [ 1,0,0,0,1],
#           [ 1,0,0,0,1],
#           [ 0,0,1,1,0],
          
#           ]


vertex = ['0','1','2','3','4','5','6','7','8','9']
adjMat = [ 
          [ 0,1,0,0,0,0,0,0,0,0],
          [ 0,0,1,1,0,0,0,0,0,0],
          [ 0,1,0,0,1,0,0,0,0,0],
          [ 0,1,0,0,1,1,0,0,0,0],
          [ 0,0,1,1,0,0,0,0,0,0],
          [ 0,0,0,1,0,0,1,1,0,0],
          [ 0,0,0,0,0,1,0,1,0,0],
          [ 0,0,0,0,0,1,1,0,1,1],
          [ 0,0,0,0,0,0,0,1,0,0],
          [ 0,0,0,0,0,0,0,1,0,0],
          
          ]

print('DFS : ', end="")
dfs(adjMat, vertex, 3)
print()

